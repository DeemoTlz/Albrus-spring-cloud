server:
  port: 8001

spring:
  application:
    name: albrus-cloud-payment-hystrix-service  # 服务别名
  datasource:
    url: jdbc:mysql://10.10.20.121:3306/albrus_cloud?useUnicode=true&characterEncoding=UTF-8&useSSL=false
    username: root
    password: 12345678
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource

    druid:  # https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8
      aop-patterns: com.albrus.*  # 监控 Spring Bean
      filters: stat,wall,slf4j  # 底层开启功能，stat（sql监控），wall（防火墙），log4j（日志记录）

      #初始化连接池的连接数量 大小，最小，最大
      initial-size: 5  #初 始化连接大小
      min-idle: 5  # 最小连接池数量
      max-active: 20  # 最大连接池数量，已经不再使用，配置了也没效果
      max-wait: 60000  # 配置获取连接等待超时的时间，单位毫秒。配置了 maxWait 之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置 useUnfairLock 属性为 true 使用非公平锁。

      time-between-eviction-runs-millis: 60000  #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      min-evictable-idle-time-millis: 30000  # 配置一个连接在池中最小生存的时间，单位是毫秒
      validation-query: SELECT 1 FROM DUAL  # 测试连接，如果 validationQuery 为 null，testOnBorrow、testOnReturn、testWhileIdle 都不会起作用。
      test-while-idle: true  # 建议配置为 true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行 validationQuery 检测连接是否有效。
      test-on-borrow: true  # 申请连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能
      test-on-return: false  # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      pool-prepared-statements: false  #是否开启 PSCache，PSCache 对支持游标的数据库性能提升巨大，Oracle 建议开启，MySQL 下建议关闭
      max-pool-prepared-statement-per-connection-size: -1 # 要启用 PSCache，必须配置大于 0，当大于 0 时，poolPreparedStatements 自动触发修改为 true。在 Druid 中，不会存在 Oracle 下 PSCache 占用内存过多的问题，可以把这个数值配置大一些，比如说 100

      stat-view-servlet:   # 配置监控页功能
        enabled: true
        login-username: admin
        login-password: admin
        resetEnable: false

      web-stat-filter:  # 监控web
        enabled: true
        urlPattern: /*
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'

      filter:
        stat:  # 对上面 filters 里面的 stat 的详细配置
          slow-sql-millis: 1000
          logSlowSql: true
          enabled: true
        wall:
          enabled: true
          config:
            drop-table-allow: false

eureka:
  client:
    register-with-eureka: true  # 将自己注册到 EurekaServer
    fetch-registry: true  # 是否从 EurekaServer 抓取已有的注册信息，默认为 true。单节点无所谓，集群必须设置为 true 才能配合 ribbon 使用负载均衡
    service-url:
      # defaultZone: http://localhost:7001/eureka/  # 路径包含 /eureka 是因为 EurekaServer 内部有 web 过滤器
      defaultZone: http://eureka7001.com:7001/eureka/, http://eureka7002.com:7002/eureka/  # 集群配置
    registry-fetch-interval-seconds: 30  # 隔多久从服务中心拉取一次服务列表，默认 30s
  instance:
    # 使用 IP 注册，否则会使用主机注册（此处考虑老版本的兼容，新版本经过实验都是 IP）
    prefer-ip-address: true
    # 自定义实例显示格式，加上版本号便于多版本管理，注意是 ip-address，早期版本是 ipaddress
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@
    # 自定义元数据（key/value 结构）
    metadata-map:
      cluster: cll
      region: rnl
    lease-renewal-interval-in-seconds: 30  # 租约续约间隔时间，默认 30s
    lease-expiration-duration-in-seconds: 90  # 租约到期，服务时效时间，默认值 90s，服务超过 90s 没有发⽣⼼跳，EurekaServer 会将服务从列表移除

hystrix:  # hystrix 配置
  command:
    default:
      execution:
        isolation:
          strategy: THREAD  # THREAD|SEMAPHORE
          thread:
            timeoutInMilliseconds: 1500	 # 超时时间，单位ms，默认为 1000
          semaphore:
            maxConcurrentRequests: 300000  # 最大并发请求量，默认 10
      circuitBreaker:
        enable: true
        requestVolumeThreshold: 10  # 触发熔断的最小请求次数，默认 20
        errorThresholdPercentage: 60  # 触发熔断的失败请求最小占比，默认 50%
        sleepWindowInMilliseconds: 100000  # 触发熔断后的服务休眠时长，休眠结束服务接口将再次启用，默认是 5000 毫秒
  shareSecurityContext: true

mybatis:
  mapper-locations: classpath:mapper/*.xml